#!/usr/bin/env bash

RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
LIGHT_GREEN='\033[1;32m'
CYAN='\033[0;36m'
MAGENTA='\033[0;95m'
NC='\033[0m' # No Color

echo -e "${MAGENTA}Updating Homebrew...${NC}"
brew update > /dev/null;

echo -e "${BLUE}Checking for formula updates...${NC}"
outdated_formula=$(brew outdated --quiet)
num_outdated_formula=$(echo $outdated_formula | wc -w | awk '{print $1}')

if [ $num_outdated_formula -gt 0 ]; then
    echo -e "${CYAN}Formula updates for...${NC}"
    for formula in $outdated_formula; do
	echo -e "\t${LIGHT_GREEN}->${NC} ${YELLOW}$formula${NC}";
    done
    echo -e -n "Update ${RED}$num_outdated_formula${NC} formula(s)? ${BLUE}[yN]${NC} ";read -p "" confirmation
    if [[ $confirmation == "y" ]]; then
		brew upgrade
		brew cleanup > /dev/null;
		brew doctor
		brew prune
	fi
else
    echo -e "${RED}No new formula available.${NC}"
fi


echo -e "${BLUE}Checking for cask updates...${NC}"
outdated_casks=$(brew cask outdated --quiet)
num_outdated_casks=$(echo $outdated_casks | wc -w | awk '{print $1}')

if [ $num_outdated_casks -gt 0 ]; then
    echo -e "${CYAN}Cask updates for...${NC}"
    for cask in $outdated_casks; do
	echo -e "   ${LIGHT_GREEN}->${NC} ${YELLOW}$cask${NC}"
    done
    echo -e -n "Update ${RED}$num_outdated_casks${NC} cask(s)? ${BLUE}[yN]${NC} ";read -p "" confirmation
    if [[ $confirmation == "y" ]]; then
		brew cask upgrade
		brew cask cleanup > /dev/null;
	fi
else
    echo -e "${RED}No new cask updates available.${NC}"
fi

#Need to verify this part works....
echo -e "${BLUE}Checking for Mac App Store App updates...${NC}"
outdated_mas_apps=$(mas outdated)
num_outdated_mas_app=$(echo $outdated_mas_apps | wc -w | awk '{print $1}')
if [ $num_outdated_mas_app -gt 0 ]; then
    echo -e "${CYAN}MAS updates for...${NC}"
    for app in $num_outdated_mas_app; do
	echo -e "   ${LIGHT_GREEN}->${NC} ${YELLOW}$app${NC}"
    done
    echo -e -n "Update ${RED}$num_outdated_casks${NC} MAS app(s)? ${BLUE}[yN]${NC} ";read -p "" confirmation
    if [[ $confirmation == "y" ]]; then
		mas upgrade
	fi
else
    echo -e "${RED}No new MAS App updates available.${NC}"
fi


#Need to verify this part works....
echo -e "${BLUE}Checking for macOS updates...${NC}"
macOSUpdates=$(softwareupdate -l | tail +5)

if [[ $macOSUpdates != "" ]]; then
	#statements
	echo $macOSUpdates
	echo -e -n "Update macOS? ${BLUE}[yN]${NC} ";read -p "" confirmation
		if [[ $confirmation == "y" ]]; then
		sudo softwareupdate -i -a && echo "macOS updates done! You may need to reboot..."
fi

fi